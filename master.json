{
    "meta": {
        "generator": "0.10.0",
        "format": 20,
        "date": 1666965849323
    },
    "custom": {
        "general": {
            "name": "General",
            "files": {
                "readme": {
                    "name": "Welcome",
                    "type": "md",
                    "content": "# Dismusic\r\n\r\nDismusic, a performance focused music system made for Discord.js version 14\r\n\r\n# Getting start\r\n\r\nInstall Dismusic\r\n\r\n```bash\r\nnpm i dismusic@latest\r\n```\r\n\r\nThen install ffmpeg-static and @discordjs/opus\r\n\r\n```bash\r\nnpm i ffmpeg-static @discordjs/opus\r\n```\r\n\r\n### Create a discord bot using discord.js\r\n\r\n```js\r\nconst { Player } = require('dismusic')\r\nconst { Client, GatewayIntentBits: Intents } = require('discord.js')\r\nconst client = new Client({\r\n    intents: [Intents.Guilds, Intents.GuildVoiceStates, Intents.MessageContent, Intents.GuildMessages]\r\n})\r\nconst player = new Player(client)\r\n\r\nplayer.on('trackStart', async function(queue, track) {\r\n    console.log(queue, track)\r\n})\r\n\r\nclient.on('messageCreate', async (message) => {\r\n    if(!message.content.startsWith('!')) return\r\n    const raw = message.content.replace('!', '')\r\n    const args = raw.split(' ')\r\n    const command = args.splice(0, 1)[0]\r\n    if(command === 'play') {\r\n        const res = await player.search(args.join(' '))\r\n        const existsQueue = await player.existsQueue(message.guild)\r\n        if(existsQueue) {\r\n            const queue = await player.getQueue(message.guild)\r\n            message.reply('<a:host_loading:1022886955266080789> Adding track(s) ' + res[0].name)\r\n            queue.addTrack(res[0])\r\n        } else {\r\n            const queue = await player.createQueue(message.guild, {\r\n                // metadata will stay with the queue until it is destroyed\r\n                metadata: {\r\n                    channel: message.channel\r\n                }\r\n            })\r\n            await queue.connectTo(message.member.voice.channel)\r\n            queue.play(res[0])\r\n            message.reply('<a:host_loading:1022886955266080789> Adding track(s) ' + res[0].name)\r\n        }\r\n    }\r\n    if(command === 'skip') {\r\n        const queue = await player.getQueue(message.guild)\r\n        queue.skip()\r\n    }\r\n})\r\n\r\nclient.on('ready', () => console.log(`Logged in as ${client.user.tag}`))\r\n\r\nclient.login('')\r\n```\r\n\r\nThere are docs for the package [here](https://retrouser955.github.io/dismusic/)\r\n\r\nIf you encountered any problems or have a question, feel free to join our [discord server](https://discord.gg/uWfMZYju8c)",
                    "path": "general/readme.md"
                }
            }
        },
        "radio": {
            "name": "Radio",
            "files": {
                "radio": {
                    "name": "Making a radio bot",
                    "type": "md",
                    "content": "##### IMPORTANT! READ BEFORE PROCEEDING\r\n\r\nRadio Client is not the main module of dismusic thus it will not be getting a lot of future support.\r\nIf you want to maintain the radio module, please submit a pull request.\r\n\r\n# Getting started with Dismusic Radio Client\r\n\r\nFirst, we can create a Discord.js Bot\r\n\r\n```js\r\nconst { Client, GatewayIntentBits: Intents } = require('discord.js')\r\nconst client = new Client({\r\n    intents: [Intents.Guilds, Intents.GuildVoiceStates, Intents.MessageContent, Intents.GuildMessages]\r\n})\r\n\r\nclient.login('TOKEN GOES HERE')\r\n```\r\n\r\nThen we will be able to add Dismusic's Radio Client to it\r\n\r\n```js\r\nconst { RadioClient } = require('dismusic')\r\nconst { Client, GatewayIntentBits: Intents } = require('discord.js')\r\n\r\nconst client = new Client({\r\n    intents: [Intents.Guilds, Intents.GuildVoiceStates, Intents.MessageContent, Intents.GuildMessages]\r\n})\r\nconst radioClient = new RadioClient(client)\r\n\r\nclient.on('messageCreate', async (message) => {\r\n    if(!message.content.startsWith('!')) return\r\n\r\n    const raw = message.content.replace('!', '')\r\n    const args = raw.split(' ')\r\n    const command = args.splice(0, 1)[0]\r\n\r\n    const connection = radioClient.connectTo(message.member.voice, message.guild)\r\n    const player = radioClient.startPlaying(\"https://stream.radiofomix.nl/listen/fomix/stream\", message.guild)\r\n    // The first argument **MUST** be a audio node that is streaming though https. Does not work with YouTube links\r\n})\r\n\r\nclient.login('TOKEN GOES HERE')\r\n```\r\n\r\n",
                    "path": "radio/radio.md"
                }
            }
        }
    },
    "classes": [
        {
            "name": "Player",
            "construct": {
                "name": "Player",
                "description": "Create a new Dismusic Player",
                "params": [
                    {
                        "name": "client",
                        "description": "The discord.js Client you want to use",
                        "type": [
                            [
                                [
                                    "Object"
                                ]
                            ]
                        ]
                    },
                    {
                        "name": "authCodes",
                        "description": "The auth code for spotify",
                        "type": [
                            [
                                [
                                    "AuthCodes"
                                ]
                            ],
                            [
                                [
                                    "undefined"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "methods": [
                {
                    "name": "search",
                    "description": "Search a track",
                    "params": [
                        {
                            "name": "query",
                            "description": "The query you want to search",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "engine",
                            "description": "The place where you want to search. Can be 'YouTube' or 'SoundCloud'",
                            "type": [
                                [
                                    [
                                        "String"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "meta": {
                        "line": 61,
                        "file": "main.js",
                        "path": "../src"
                    }
                },
                {
                    "name": "getQueue",
                    "description": "Get the existing Queue of a guild",
                    "params": [
                        {
                            "name": "guild",
                            "description": "The guild of the queue you want to get",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "returns": {
                        "types": [
                            [
                                [
                                    "QueueBuilder"
                                ]
                            ]
                        ],
                        "description": "The queue of guild"
                    },
                    "meta": {
                        "line": 99,
                        "file": "main.js",
                        "path": "../src"
                    }
                },
                {
                    "name": "existsQueue",
                    "description": "Check if the queue exists in a guild",
                    "params": [
                        {
                            "name": "guild",
                            "description": "the guild you want to validate",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "returns": {
                        "types": [
                            [
                                [
                                    "boolean"
                                ]
                            ]
                        ],
                        "description": "true if the guild exists in the queue, false otherwise"
                    },
                    "meta": {
                        "line": 108,
                        "file": "main.js",
                        "path": "../src"
                    }
                },
                {
                    "name": "createQueue",
                    "params": [
                        {
                            "name": "guild",
                            "description": "the guild you want to create a queue for",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "options",
                            "description": "The options for creating a queue",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "returns": {
                        "types": [
                            [
                                [
                                    "QueueBuilder"
                                ]
                            ]
                        ],
                        "description": "The queue you just created"
                    },
                    "meta": {
                        "line": 118,
                        "file": "main.js",
                        "path": "../src"
                    }
                }
            ],
            "meta": {
                "line": 31,
                "file": "main.js",
                "path": "../src"
            }
        },
        {
            "name": "RadioClient",
            "construct": {
                "name": "RadioClient",
                "description": "Create a new radio Client",
                "params": [
                    {
                        "name": "client",
                        "description": "The discord.js client",
                        "type": [
                            [
                                [
                                    "object"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "methods": [
                {
                    "name": "connectTo",
                    "description": "Join a voice channel",
                    "params": [
                        {
                            "name": "voice",
                            "description": "The member's voice state <member>.voice",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "The discord.js guild",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "returns": [
                        [
                            [
                                "VoiceConnection"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 34,
                        "file": "radio.js",
                        "path": "../src"
                    }
                },
                {
                    "name": "startPlaying",
                    "description": "Start playing a station in your voice channel",
                    "params": [
                        {
                            "name": "resource",
                            "description": "The MP3 link of your radio channel.",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        },
                        {
                            "name": "guild",
                            "description": "the guild",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "returns": [
                        [
                            [
                                "AudioPlayer"
                            ]
                        ]
                    ],
                    "meta": {
                        "line": 48,
                        "file": "radio.js",
                        "path": "../src"
                    }
                }
            ],
            "meta": {
                "line": 24,
                "file": "radio.js",
                "path": "../src"
            }
        },
        {
            "name": "QueueBuilder",
            "construct": {
                "name": "QueueBuilder",
                "description": "Create a new queue",
                "params": [
                    {
                        "name": "guild",
                        "description": "The guild of the discord server",
                        "type": [
                            [
                                [
                                    "Object"
                                ]
                            ]
                        ]
                    },
                    {
                        "name": "options",
                        "description": "The options for the queue. Automatically configed by Dismusic",
                        "type": [
                            [
                                [
                                    "object"
                                ]
                            ]
                        ]
                    }
                ]
            },
            "methods": [
                {
                    "name": "play",
                    "description": "Play something in the voice channel",
                    "params": [
                        {
                            "name": "searchRes",
                            "description": "The search Results you got from <player>.search function",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "meta": {
                        "line": 35,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "connectTo",
                    "description": "Connect to a voice channel",
                    "params": [
                        {
                            "name": "channel",
                            "description": "The discord.js voice channel",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "returns": {
                        "types": [
                            [
                                [
                                    "object"
                                ]
                            ]
                        ],
                        "description": "Returns the discord.js connection object"
                    },
                    "meta": {
                        "line": 115,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "skip",
                    "description": "Skip a track in the queue",
                    "async": true,
                    "returns": {
                        "types": [
                            [
                                [
                                    "object"
                                ]
                            ]
                        ],
                        "description": "Returns an object that contains the track skipped"
                    },
                    "meta": {
                        "line": 128,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "addTrack",
                    "description": "Add a track to the queue",
                    "params": [
                        {
                            "name": "searchRes",
                            "description": "The results your found",
                            "type": [
                                [
                                    [
                                        "object"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "meta": {
                        "line": 158,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "addTracks",
                    "description": "Add multiple tracks to the queue",
                    "params": [
                        {
                            "name": "playlist",
                            "description": "The results you found. Good for adding playlists",
                            "type": [
                                [
                                    [
                                        "Array",
                                        "<"
                                    ],
                                    [
                                        "Object",
                                        ">"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "meta": {
                        "line": 165,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "pause",
                    "description": "Pause the player",
                    "async": true,
                    "meta": {
                        "line": 173,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "resume",
                    "description": "resume the player",
                    "async": true,
                    "meta": {
                        "line": 182,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "setVolume",
                    "description": "Set the volume of the audio player",
                    "params": [
                        {
                            "name": "amount",
                            "description": "The amount of volume you want to set",
                            "type": [
                                [
                                    [
                                        "number"
                                    ]
                                ],
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "meta": {
                        "line": 195,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "setLoopMode",
                    "description": "Set the loop mode of this queue",
                    "params": [
                        {
                            "name": "mode",
                            "description": "The mode your want to set. Can be `[ 'queue', 'none', 'song' ]`",
                            "type": [
                                [
                                    [
                                        "string"
                                    ]
                                ]
                            ]
                        }
                    ],
                    "async": true,
                    "meta": {
                        "line": 206,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                },
                {
                    "name": "getCurrentTrack",
                    "description": "Get the current track being played",
                    "async": true,
                    "returns": {
                        "types": [
                            [
                                [
                                    "object"
                                ]
                            ]
                        ],
                        "description": "The current track being played"
                    },
                    "meta": {
                        "line": 215,
                        "file": "Queue.js",
                        "path": "../src/utils"
                    }
                }
            ],
            "meta": {
                "line": 14,
                "file": "Queue.js",
                "path": "../src/utils"
            }
        }
    ],
    "interfaces": [],
    "typedefs": [
        {
            "name": "SpotifyAuth",
            "description": "The auth codes for spotify",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "clientId",
                    "description": "The client ID of your spotify application",
                    "type": [
                        [
                            [
                                "string"
                            ]
                        ]
                    ]
                },
                {
                    "name": "clientSecret",
                    "description": "The client secret of your spotify application",
                    "type": [
                        [
                            [
                                "string"
                            ]
                        ]
                    ]
                },
                {
                    "name": "refresh_token",
                    "description": "the refresh token for your spotify application",
                    "type": [
                        [
                            [
                                "string"
                            ]
                        ]
                    ]
                },
                {
                    "name": "market",
                    "description": "the market to search on spotify",
                    "type": [
                        [
                            [
                                "string"
                            ]
                        ],
                        [
                            [
                                "undefined"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 1,
                "file": "main.js",
                "path": "../src"
            }
        },
        {
            "name": "AuthCodes",
            "description": "The auth codes for the client",
            "type": [
                [
                    [
                        "Object"
                    ]
                ]
            ],
            "props": [
                {
                    "name": "spotify",
                    "description": "The Spotify Auth codes",
                    "type": [
                        [
                            [
                                "SpotifyAuth"
                            ]
                        ]
                    ]
                }
            ],
            "meta": {
                "line": 8,
                "file": "main.js",
                "path": "../src"
            }
        },
        {
            "name": "play",
            "type": [
                [
                    [
                        "function"
                    ]
                ]
            ],
            "params": [
                {
                    "name": "serachRes",
                    "description": "the value which the .serach function would return",
                    "type": [
                        [
                            [
                                "object"
                            ]
                        ]
                    ]
                }
            ],
            "returns": [
                [
                    [
                        "undefined"
                    ]
                ]
            ],
            "meta": {
                "line": 12,
                "file": "main.js",
                "path": "../src"
            }
        }
    ],
    "externals": []
}
